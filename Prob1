{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_nugget_number(candidate, sizes) -> bool:\n",
    "    S = sizes['Small']\n",
    "    M = sizes['Medium']\n",
    "    L = sizes['Large']\n",
    "    for a in range(candidate//S +1):\n",
    "        for b in range(candidate//M + 1):\n",
    "            for c in range(candidate//L + 1):\n",
    "                if candidate == S * a + M * b + L * c:\n",
    "                    return True\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The largest number that you cannot get is: 43\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    sizes = {'Small' : 6, 'Medium' : 9, 'Large' : 20}\n",
    "    count = 0\n",
    "    largest = 0\n",
    "    candidate = sizes['Small']\n",
    "    while count < sizes['Small']:\n",
    "        if is_nugget_number(candidate, sizes):\n",
    "            count += 1\n",
    "        else:\n",
    "            largest = candidate\n",
    "            count = 0\n",
    "        candidate += 1\n",
    "        \n",
    "    print(\"The largest number that you cannot get is: \" + str(largest))        \n",
    "    \n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
